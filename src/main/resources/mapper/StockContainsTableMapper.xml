<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.czsc.dao.StockContainsTableMapper">
  <resultMap id="BaseResultMap" type="com.czsc.entity.StockContainsTable">
    <result column="id" jdbcType="VARCHAR" property="id" />
    <result column="symbol" jdbcType="VARCHAR" property="symbol" />
    <result column="dt" jdbcType="TIMESTAMP" property="dt" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="num" jdbcType="INTEGER" property="num" />
    <result column="high" jdbcType="DECIMAL" property="high" />
    <result column="low" jdbcType="DECIMAL" property="low" />
    <result column="volume" jdbcType="DECIMAL" property="volume" />
    <result column="fenxing_type" jdbcType="INTEGER" property="fenxingType" />
    <result column="fenxing_power" jdbcType="INTEGER" property="fenxingPower" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <insert id="insert" parameterType="com.czsc.entity.StockContainsTable">
    <selectKey keyProperty="symbol" order="AFTER" resultType="java.lang.String">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into stock_contains_table (id, symbol, dt, `type`,
      num, high, low, volume, 
      fenxing_type, fenxing_power, update_time
      )
    values (#{id,jdbcType=VARCHAR}, #{symbol,jdbcType=VARCHAR}, #{dt,jdbcType=TIMESTAMP}, #{type,jdbcType=INTEGER},
      #{num,jdbcType=INTEGER}, #{high,jdbcType=DECIMAL}, #{low,jdbcType=DECIMAL}, #{volume,jdbcType=DECIMAL}, 
      #{fenxingType,jdbcType=INTEGER}, #{fenxingPower,jdbcType=INTEGER}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, symbol, dt, `type`, num, high, low, volume, fenxing_type, fenxing_power, 
    update_time
    from stock_contains_table
  </select>

  <select id="getStockContainsTablesBySymbolAndStartTimeAndEndTime" resultMap="BaseResultMap">
    select id, symbol, dt, `type`, num, high, low, volume, fenxing_type, fenxing_power,
    update_time
    from stock_contains_table
    <where>
        symbol = #{symbol}
      <if test="startTime != null">
        and <![CDATA[ dt >= #{startTime} ]]>
      </if>
      <if test="endTime != null">
        and <![CDATA[ dt <= #{endTime} ]]>
      </if>
    </where>
    order by dt ASC
  </select>
</mapper>